name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Optional version bump: major | minor | patch（留空不變，自動偵測）'
        required: false
        default: ''
  push:
    branches: [ master ]

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  # === 1️⃣ Test：多版本矩陣（Node 18 / 20）===
  Test:
    name: Lint & Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
      - name: Lint (if present)
        run: npm run lint --if-present
      - name: Test (if present)
        run: npm test --if-present

  # === 2️⃣ Build：版本計算 / 產出 build artifact ===
  Build:
    name: Build
    needs: [Test]
    runs-on: ubuntu-latest
    outputs:
      version:      ${{ steps.meta.outputs.version }}
      dev_tag:      ${{ steps.meta.outputs.dev_tag }}
      staging_tag:  ${{ steps.meta.outputs.staging_tag }}
      prod_tag:     ${{ steps.meta.outputs.prod_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 自動偵測 bump 類型
      - name: Detect bump type automatically
        id: bump
        run: |
          MSG=$(git log -1 --pretty=%B | tr '[:upper:]' '[:lower:]')
          echo "最近一次 commit: $MSG"
          if [[ "$MSG" == *"breaking change"* ]]; then
            TYPE=major
          elif [[ "$MSG" == *"feat:"* ]]; then
            TYPE=minor
          elif [[ "$MSG" == *"fix:"* ]]; then
            TYPE=patch
          else
            TYPE=""
          fi
          echo "type=$TYPE" >> "$GITHUB_OUTPUT"

      # 計算版本與 tag
      - name: Compute Version & Tags (O-level)
        id: meta
        run: |
          if [ -f package.json ]; then
            BASE_VERSION=$(node -p "require('./package.json').version || '1.0.0'")
          else
            BASE_VERSION="1.0.0"
          fi

          # 優先使用手動輸入，其次自動偵測
          BUMP="${{ github.event.inputs.bump || steps.bump.outputs.type }}"
          echo "最終 bump 類型: ${BUMP:-none}"

          if [ -n "$BUMP" ]; then
            IFS='.' read -r MA MI PA <<< "$(echo "$BASE_VERSION" | sed 's/-.*//')"
            case "$BUMP" in
              major) MA=$((MA+1)); MI=0; PA=0 ;;
              minor) MI=$((MI+1)); PA=0 ;;
              patch|*) PA=$((PA+1)) ;;
            esac
            BASE_VERSION="${MA}.${MI}.${PA}"
          fi

          RUN_NO="${GITHUB_RUN_NUMBER}"
          DEV_TAG="dev-v${BASE_VERSION}-alpha.${RUN_NO}"
          STAGING_TAG="staging-v${BASE_VERSION}-rc.${RUN_NO}"
          PROD_TAG="prod-v${BASE_VERSION}"

          echo "version=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "dev_tag=$DEV_TAG" >> "$GITHUB_OUTPUT"
          echo "staging_tag=$STAGING_TAG" >> "$GITHUB_OUTPUT"
          echo "prod_tag=$PROD_TAG" >> "$GITHUB_OUTPUT"

      - name: Show computed tags
        run: |
          echo "version=${{ steps.meta.outputs.version }}"
          echo "dev_tag=${{ steps.meta.outputs.dev_tag }}"
          echo "staging_tag=${{ steps.meta.outputs.staging_tag }}"
          echo "prod_tag=${{ steps.meta.outputs.prod_tag }}"

      - name: Install & Build
        run: |
          npm ci || npm install
          npm run build --if-present || true

      - name: Archive build
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # === 3️⃣ Deploy to Dev ===
  DeployDev:
    name: Deploy to Dev
    needs: [Build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    environment: Development
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Dev Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.Build.outputs.dev_tag }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ $TAG already exists."
          else
            gh release create "$TAG" build.zip --prerelease --generate-notes --notes "$NOTE"
          fi

  # === 4️⃣ Deploy to Staging ===
  DeployStaging:
    name: Deploy to Staging
    needs: [Build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    environment: Staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Staging Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.Build.outputs.staging_tag }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ $TAG exists. Skipping."
          else
            gh release create "$TAG" build.zip --prerelease --generate-notes --notes "$NOTE"
          fi

      # 失敗時自動清理
      - name: Cleanup on failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.Build.outputs.staging_tag }}
        run: |
          echo "🧹 Cleaning failed release..."
          gh release delete "$TAG" -y || true
          git push origin ":refs/tags/$TAG" || true

      # 通知 Slack
      - name: Notify Slack (staging)
        if: always()
        env:
          STATUS: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TAG: ${{ needs.Build.outputs.staging_tag }}
        run: |
          MSG="*[Staging]* job status: *$STATUS* for tag \`$TAG\`"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" \
            "$SLACK_WEBHOOK_URL"

  # === 5️⃣ Deploy to Production ===
  DeployProd:
    name: Deploy to Production
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    environment: Production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Production Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.Build.outputs.prod_tag }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ $TAG exists. Skipping."
          else
            gh release create "$TAG" build.zip --generate-notes --notes "$NOTE"
          fi

      - name: Cleanup on failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ needs.Build.outputs.prod_tag }}
        run: |
          echo "🧹 Cleaning failed release..."
          gh release delete "$TAG" -y || true
          git push origin ":refs/tags/$TAG" || true

      - name: Notify Slack (prod)
        if: always()
        env:
          STATUS: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          TAG: ${{ needs.Build.outputs.prod_tag }}
        run: |
          MSG="*[Production]* job status: *$STATUS* for tag \`$TAG\`"
          curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"$MSG\"}" \
            "$SLACK_WEBHOOK_URL"

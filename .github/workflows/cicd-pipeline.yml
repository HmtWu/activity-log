name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 若偵測到 Node 專案才裝 Node
      - name: Setup Node (only when Node project)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 安裝 Bun（很多 action 專案的 build 腳本會用 bun）
      - name: Setup Bun (for bun-based builds)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      # 先 bun，再 npm；沒有 build 腳本也不會失敗
      - name: Install deps & run build (bun/npm)
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          set -e
          echo "Trying bun install (ok if not needed)..."
          bun install || true
          if [ -f package-lock.json ]; then
            echo "Using npm ci..."
            npm ci || true
          else
            echo "Using npm install..."
            npm install || true
          fi
          echo "Run build script if present..."
          npm run build --if-present || true

      # 一律打包成 build.zip，供後續環境使用
      - name: Archive workspace
        run: |
          zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          retention-days: 7

  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          echo "🔹 Checking GH auth..."
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          echo "🔹 Releasing $TAG"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ Release $TAG already exists. Skipping create."
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  deploy-staging:
    name: Deploy to Staging
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Staging Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ Release $TAG already exists. Skipping create."
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

  deploy-production:
    name: Deploy to Production (requires approval)
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Production Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "⚠️ Release $TAG already exists. Skipping create."
          else
            gh release create "$TAG" build.zip --notes "$NOTE"
          fi

name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ master ]   # 你是 master；若用 main 就改成 main

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (only when Node project)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Bun (for bun-based builds)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Install deps & build (bun/npm)
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          set -e
          bun install || true
          if [ -f package-lock.json ]; then npm ci || true; else npm install || true; fi
          npm run build --if-present || true

      - name: Archive workspace
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip
          retention-days: 7

  DeployDev:
    name: Deploy to Dev
    needs: [Build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}      # 老師投影片有加 if
    environment:
      name: Development                               # ← 名稱要和 Settings 完全一致
      url: ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, vars.BUILD_TAG) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Dev Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "⚠️ $TAG already exists. Skipping."
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --repo "$REPO"
          fi

  DeployStaging:
    name: Deploy to Staging
    needs: [Build]
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    environment:
      name: Staging
      url: ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, vars.BUILD_TAG) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Staging Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "⚠️ $TAG already exists. Skipping."
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --repo "$REPO"
          fi

  DeployProd:
    name: Deploy to Production
    needs: [DeployStaging]                             # ← 只有 Staging 成功才進 Production（E 要求）
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/master' }}
    environment:
      name: Production                                 # ← 要和 Settings 完全一致（啟用 Required reviewers）
      url: ${{ format('https://github.com/{0}/releases/tag/{1}', github.repository, vars.BUILD_TAG) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Production Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}
          NOTE: ${{ vars.RELEASE_NOTE }}
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "⚠️ $TAG already exists. Skipping."
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --repo "$REPO"
          fi

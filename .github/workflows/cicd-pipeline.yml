name: CI Dev Deployment

on:
  workflow_dispatch:
  push:
    branches: [ master ]   # 若你的預設分支是 main，改成 main

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 若偵測到 Node 專案才安裝 Node/Bun；沒有 package.json 也能繼續
      - name: Setup Node
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Bun (optional)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      # 基本建置（符合 A 要求）；沒有 build 腳本時不報錯
      - name: Install & Build
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          set -e
          bun install || true
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          npm run build --if-present

      # 打包並上傳 artifact（符合 A 要求）
      - name: Package artifact
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: dev
      # 讓卡片有穩定可點的連結（Releases 列表，不會 404）
      url: ${{ format('https://github.com/{0}/releases', github.repository) }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # 內建 token，無需手動建立
          REPO: ${{ github.repository }}
          TAG:  ${{ vars.BUILD_TAG }}            # 取自 dev 環境變數（dev-v1.0）
          NOTE: ${{ vars.RELEASE_NOTE }}         # 取自 dev 環境變數
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"

          # 若同名 release 已存在則略過，避免重跑失敗
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Skipping."
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --repo "$REPO"
          fi

          # 在總結區印出可點連結（方便你找）
          URL=$(gh release view "$TAG" --repo "$REPO" --json url -q .url)
          echo "### ✅ Dev release created: [$TAG]($URL)" >> "$GITHUB_STEP_SUMMARY"

name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Optional version bump: major | minor | patch（留空自動偵測）'
        required: false
        default: ''
  push:
    branches: [ master ]

permissions:
  contents: write

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  # === Step 1：多版本測試矩陣（Node 18 / 20）===
  Test:
    name: Lint & Test (matrix)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Lint (if present)
        run: npm run lint --if-present

      - name: Test (if present)
        run: npm test --if-present

  # === Build：版本計算與產物 ===
  Build:
    name: Build
    needs: [Test]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      dev_tag: ${{ steps.meta.outputs.dev_tag }}
      staging_tag: ${{ steps.meta.outputs.staging_tag }}
      prod_tag: ${{ steps.meta.outputs.prod_tag }}

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # === Step 2：自動偵測 bump 類型 ===
      - name: Detect bump type automatically
        id: bumpdetect
        run: |
          MSG=$(git log -1 --pretty=%B | tr '[:upper:]' '[:lower:]')
          echo "最近一次 commit message: $MSG"
          if [[ "$MSG" == *"breaking change"* ]]; then
            DETECTED="major"
          elif [[ "$MSG" == *"feat:"* ]]; then
            DETECTED="minor"
          elif [[ "$MSG" == *"fix:"* ]]; then
            DETECTED="patch"
          else
            DETECTED="none"
          fi
          echo "自動偵測結果: $DETECTED"
          echo "detected=$DETECTED" >> "$GITHUB_OUTPUT"

      # === Step 3：計算版本與標籤 ===
      - name: Compute Version & Tags (O-level)
        id: meta
        shell: bash
        run: |
          if [ -f package.json ]; then
            BASE_VERSION=$(node -p "require('./package.json').version || '1.0.0'")
          else
            BASE_VERSION="1.0.0"
          fi

          BUMP="${{ github.event.inputs.bump }}"
          AUTO="${{ steps.bumpdetect.outputs.detected }}"

          if [ "$BUMP" = "" ]; then
            if [ "$AUTO" != "none" ]; then
              BUMP="$AUTO"
            fi
          fi

          echo "最終使用的 bump 類型: ${BUMP:-無變更}"

          if [ -n "$BUMP" ] && [ "$BUMP" != "none" ]; then
            IFS='.' read -r MA MI PA <<< "$(echo "$BASE_VERSION" | sed 's/-.*//')"
            case "$BUMP" in
              major) MA=$((MA+1)); MI=0; PA=0 ;;
              minor) MI=$((MI+1)); PA=0 ;;
              patch) PA=$((PA+1)) ;;
            esac
            BASE_VERSION="${MA}.${MI}.${PA}"
          fi

          RUN_NO="${GITHUB_RUN_NUMBER}"

          DEV_TAG="dev-v${BASE_VERSION}-alpha.${RUN_NO}"
          STAGING_TAG="staging-v${BASE_VERSION}-rc.${RUN_NO}"
          PROD_TAG="prod-v${BASE_VERSION}"

          echo "version=$BASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "dev_tag=$DEV_TAG" >> "$GITHUB_OUTPUT"
          echo "staging_tag=$STAGING_TAG" >> "$GITHUB_OUTPUT"
          echo "prod_tag=$PROD_TAG" >> "$GITHUB_OUTPUT"

          echo "產生版本: $BASE_VERSION"
          echo "dev_tag=$DEV_TAG"
          echo "staging_tag=$STAGING_TAG"
          echo "prod_tag=$PROD_TAG"

      - name: Install deps & build
        run: |
          if [ -f package.json ]; then
            npm ci || npm install
            npm run build --if-present
          fi

      - name: Archive workspace
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # === Deploy to Dev ===
  DeployDev:
    name: Deploy to Dev
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Dev Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ needs.Build.outputs.dev_tag }}
        run: |
          gh auth login --with-token <<< "$GH_TOKEN"
          gh release create "$TAG" build.zip --prerelease --generate-notes --repo "$REPO"

  # === Deploy to Staging ===
  DeployStaging:
    name: Deploy to Staging
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Staging
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Staging Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ needs.Build.outputs.staging_tag }}
        run: |
          gh auth login --with-token <<< "$GH_TOKEN"
          gh release create "$TAG" build.zip --prerelease --generate-notes --repo "$REPO"

  # === Deploy to Production ===
  DeployProd:
    name: Deploy to Production
    needs: [Build, DeployStaging]
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Release Production Build (safe)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ needs.Build.outputs.prod_tag }}
        run: |
          gh auth login --with-token <<< "$GH_TOKEN"
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "⚠️ Release $TAG already exists, skipping."
            exit 0
          fi
          gh release create "$TAG" build.zip --generate-notes --repo "$REPO"

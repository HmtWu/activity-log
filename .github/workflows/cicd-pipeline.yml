name: CI Dev Deployment

on:
  workflow_dispatch:
  push:
    branches: [ master ]  # 若你的預設分支是 main，改成 main

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 若是 Node 專案才裝 Node/Bun；不是也沒關係，後面會直接打包
      - name: Setup Node
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup Bun (optional)
        if: ${{ hashFiles('**/package.json') != '' }}
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Install & Build (bun/npm, tolerant)
        if: ${{ hashFiles('**/package.json') != '' }}
        run: |
          bun install || true
          if [ -f package-lock.json ]; then npm ci || true; else npm install || true; fi
          npm run build --if-present || true

      - name: Package artifact
        run: zip -r build.zip . -x ".git/*" "node_modules/*"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  deploy-dev:
    name: Deploy to Dev
    needs: build
    runs-on: ubuntu-latest
    environment: dev       # 確保和你的環境名稱一致（dev）
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG: ${{ vars.BUILD_TAG }}        # 取自 dev 環境變數
          NOTE: ${{ vars.RELEASE_NOTE }}    # 取自 dev 環境變數
        run: |
          set -e
          gh auth status || gh auth login --with-token <<< "$GH_TOKEN"
          # 若 tag 已存在則略過，避免重跑時失敗
          if gh release view "$TAG" --repo "$REPO" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Skipping."
          else
            gh release create "$TAG" build.zip --notes "$NOTE" --repo "$REPO"
          fi
